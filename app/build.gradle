import java.text.SimpleDateFormat
import java.text.DateFormat
// 声明是Android程序，
//com.android.application 表示这是一个应用程序模块
//com.android.library 标识这是一个库模块
//而这区别：前者可以直接运行，后着是依附别的应用程序运行
apply plugin: 'com.android.application'
def currentTime = getCurrentTime();
static def getCurrentTime() {
    DateFormat df = new SimpleDateFormat("yyyyMMdd")
    return df.format(Calendar.getInstance(Locale.CHINA).getTime())
}

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "ma.mhy.sqliteeditorroot"
        minSdkVersion 15
        targetSdkVersion 28
        versionCode getMyVersionCode()
        versionName getMyVersionName()
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    signingConfigs {// 自动化打包配置
        release {// 线上环境
            keyAlias '55'
            keyPassword '201055'
            storeFile file('55.jks')
            storePassword '201055'
        }
        debug {// 开发环境
            keyAlias '55'
            keyPassword '201055'
            storeFile file('55.jks')
            storePassword '201055'
        }
    }
    //release版本输出包名自动追加版本号和版本名称
    applicationVariants.all {
        variant ->
            variant.outputs.all {
                if (buildType.name == 'release') {
                    outputFileName = "app_v" + defaultConfig.versionName + "_" + new Date().format("yyyy-MM-dd") + "_" + buildType.name + ".apk"
                }
            }
    }
    buildTypes {
        release {
//            buildConfigField("boolean","API_DEBUG","false")//Log信息
            buildConfigField("String", "apkBuildTime", "\"${currentTime}\"")
          //  buildConfigField("String", "releaseTime", "\""+new Date().format("yyyy/MM/dd HH:mm:ss", TimeZone.getTimeZone("UTC"))+"\"")//buildtime
            minifyEnabled false//是否对代码进行混淆
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release//设置签名信息
            pseudoLocalesEnabled false//是否在APK中生成伪语言环境，帮助国际化的东西，一般使用的不多
            zipAlignEnabled true//是否对APK包执行ZIP对齐优化，减小zip体积，增加运行效率
            applicationIdSuffix 'test'//在applicationId 中添加了一个后缀，一般使用的不多
            versionNameSuffix 'test'//在applicationId 中添加了一个后缀，一般使用的不多

        }
        debug {
            buildConfigField("String", "apkBuildTime", "\"${currentTime}\"")
            minifyEnabled false
            // 为了不和 release 版本冲突
            //applicationIdSuffix ".debug"
            proguardFiles getDefaultProguardFile('proguard-android.txt'),'proguard-rules.pro'
            signingConfig signingConfigs.debug//设置签名信息
            debuggable false//是否支持断点调试
            jniDebuggable false//是否可以调试NDK代码
            renderscriptDebuggable false//是否开启渲染脚本就是一些c写的渲染方法
            zipAlignEnabled true//是否对APK包执行ZIP对齐优化，减小zip体积，增加运行效率
            pseudoLocalesEnabled false//是否在APK中生成伪语言环境，帮助国际化的东西，一般使用的不多
            applicationIdSuffix 'test'//在applicationId 中添加了一个后缀，一般使用的不多
            versionNameSuffix 'test'//在applicationId 中添加了一个后缀，一般使用的不多
        }
    }
    sourceSets {//目录指向配置
        main {
            jniLibs.srcDirs = ['libs']//指定lib库目录
        }
    }
    packagingOptions{
        //pickFirsts做用是 当有重复文件时 打包会报错 这样配置会使用第一个匹配的文件打包进入apk
        // 表示当apk中有重复的META-INF目录下有重复的LICENSE文件时  只用第一个 这样打包就不会报错
        pickFirsts = ['META-INF/LICENSE']

        //merges何必 当出现重复文件时 合并重复的文件 然后打包入apk
        //这个是有默认值得 merges = [] 这样会把默默认值去掉  所以我们用下面这种方式 在默认值后添加
        merge 'META-INF/LICENSE'

        //这个是在同时使用butterknife、dagger2做的一个处理。同理，遇到类似的问题，只要根据gradle的提示，做类似处理即可。
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }

//    productFlavors {//多个渠道配置
//        wandoujia {}
//        xiaomi {}
//        _360 {}
//        //...
//    }
//
//    productFlavors.all {
//            //批量修改，类似一个循序遍历
//        flavor -> flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
//    }
//程序在编译的时候会检查lint，有任何错误提示会停止build，我们可以关闭这个开关
    lintOptions {
        abortOnError false //即使报错也不会停止打包
        checkReleaseBuilds false  //打包release版本的时候进行检测
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation 'com.github.huangyanbin:SmartTable:2.2.0'
//    implementation 'androidx.annotation:annotation:1.0.0'
}

static def getMyVersionCode() {
    return Integer.parseInt(new SimpleDateFormat("yyMMddHHmm").format(new Date()))+"git rev-list  --count HEAD".execute().getText().toInteger()
}

static def getMyVersionName() {
    return "1.0.6." + "git describe --always".execute().getText().trim()
}
