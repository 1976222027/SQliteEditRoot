import java.text.SimpleDateFormat

apply plugin: 'com.android.application'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "ma.mhy.sqliteeditorroot"
        minSdkVersion 15
        targetSdkVersion 28
        versionCode getVersionCode()
        versionName getVersionName()
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    //release版本输出包名自动追加版本号和版本名称

    applicationVariants.all {

        variant ->

            variant.outputs.all {

                if (buildType.name == 'release') {

                    outputFileName = "app_v" + defaultConfig.versionName + "_" + new Date().format("yyyy-MM-dd") + "_" + buildType.name + ".apk"

                }

            }
    }
    buildTypes {
        release {
//            buildConfigField("boolean","API_DEBUG","false")
            buildConfigField("String", "releaseTime", "\""+new Date().format("yyyy/MM/dd HH:mm:ss")+"\"")//buildtime
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {

            buildConfigField("boolean","API_DEBUG","true")
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'),'proguard-rules.pro'

        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation 'com.github.huangyanbin:SmartTable:2.2.0'
//    implementation 'androidx.annotation:annotation:1.0.0'
}

//static def getMyVersionCode() {
//    return Integer.parseInt(new SimpleDateFormat("yyMMdd").format(new Date()))
//}
//
//static def getMyVersionName() {
//    return "1.0.6." + "git describe --always".execute().getText().trim()
//}
//设置发布时的版本号

static def getVersionName() {


    int i ="git rev-list --count HEAD".execute().getText().toInteger()//build次数

    String today =new Date().format("yyMMdd")

    Process process ="git describe --always".execute()

    process.waitFor()

    String str = process.getText().trim()

//    return "$aa.$i.$today.$str"//"3.276"+str+    //3.1.20181015.内容
     return 3+"."+i+"."+"."+today+"."+str

}

//设置发布时的版本码

static def getVersionCode() {

    Process process ="git rev-list --count HEAD".execute()

    process.waitFor()

    int i = process.getText().toInteger()

    return Integer.parseInt(new SimpleDateFormat("yyMMdd").format(new Date()))*10000 +i//今天日期1810150001+次数

}