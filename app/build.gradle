import java.text.SimpleDateFormat
import java.text.DateFormat
apply plugin: 'com.android.application'
def currentTime = getCurrentTime();

static def getCurrentTime() {
    DateFormat df = new SimpleDateFormat("yyMMdd")
    return df.format(Calendar.getInstance(Locale.CHINA).getTime())
}

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "ma.mhy.sqliteeditorroot"
        minSdkVersion 15
        targetSdkVersion 28
        versionCode getMyVersionCode()
        versionName getMyVersionName()
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    //release版本输出包名自动追加版本号和版本名称
    applicationVariants.all {
        variant ->
            variant.outputs.all {
                if (buildType.name == 'release') {
                    outputFileName = "app_v" + defaultConfig.versionName + "_" + new Date().format("yyyy-MM-dd") + "_" + buildType.name + ".apk"
                }
            }
    }
    buildTypes {
        release {
//            buildConfigField("boolean","API_DEBUG","false")
            buildConfigField("String", "apkBuildTime", "\"${currentTime}\"")
          //  buildConfigField("String", "releaseTime", "\""+new Date().format("yyyy/MM/dd HH:mm:ss", TimeZone.getTimeZone("UTC"))+"\"")//buildtime
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            buildConfigField("String", "apkBuildTime", "\"${currentTime}\"")
            minifyEnabled false
            // 为了不和 release 版本冲突
            //applicationIdSuffix ".debug"
            proguardFiles getDefaultProguardFile('proguard-android.txt'),'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation 'com.github.huangyanbin:SmartTable:2.2.0'
//    implementation 'androidx.annotation:annotation:1.0.0'
}

static def getMyVersionCode() {
    return Integer.parseInt(new SimpleDateFormat("yyMMddHHmm").format(new Date()))*10+"git rev-list --all --count".execute().getText().toInteger()
}

static def getMyVersionName() {
    return "1.0.6." + "git describe --always".execute().getText().trim()
}
//设置发布时的版本号

static def getVersionName() {

//    int i ="git rev-list --count HEAD".execute().getText().toInteger()//build次数
//
    String today =new Date().format("yyMMdd")
//
//    Process process ="git describe --always".execute()
//
//    process.waitFor()
//
//    String str = process.getText().trim()

//    return "$aa.$i.$today.$str"//"3.276"+str+    //3.1.20181015.内容
//     return "3"+"."+i+"."+today+"."+str
     return "3."+today

}

//设置发布时的版本码

static def getVersionCode() {

//    Process process ="git rev-list --count HEAD".execute()
//
//    process.waitFor()
//
//    int i = process.getText().toInteger()

    return Integer.parseInt(new SimpleDateFormat("yyMMdd").format(new Date()))//今天日期1810150001+次数

}